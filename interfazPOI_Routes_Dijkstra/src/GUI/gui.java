
package GUI;

import Structures.*;
import code.*;
import java.awt.Color;
import java.awt.Graphics;
import java.awt.image.BufferedImage;

import java.io.*;
import java.util.*;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.imageio.ImageIO;
import javax.swing.DefaultComboBoxModel;
import javax.swing.DefaultListModel;
import javax.swing.JOptionPane;

public class gui extends javax.swing.JFrame {
    
    GraphControl graphPOIControls = new GraphControl();
    Graph graphPOI = new Graph(graphPOIControls.getVertices(), graphPOIControls.getEdges());
    
    List<TravelRoute> listTravelRoutes = new ArrayList<>();
    
    DefaultListModel dlmTravelRouteCreate = new DefaultListModel();
    DefaultListModel dlmTravelRouteSelect = new DefaultListModel();
    DefaultListModel dlmTravelRouteDelete = new DefaultListModel();
    DefaultListModel dlmShortestPath = new DefaultListModel();
    
    public gui() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        mapPanel = new javax.swing.JPanel();
        cbMapMode = new javax.swing.JComboBox<>();
        btnLoadMap = new javax.swing.JButton();
        txtSeleccion = new javax.swing.JLabel();
        mapManagementPanel = new javax.swing.JPanel();
        pointOfInterestPanel = new javax.swing.JPanel();
        poiOperationsPanel = new javax.swing.JPanel();
        createPOIPanel = new javax.swing.JPanel();
        btnCreatePOI = new javax.swing.JButton();
        cbTypeCreatePOI = new javax.swing.JComboBox<>();
        txtPOICreateName = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        txtXCoordPOICreate = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        txtYCoordPOICreate = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        editPOIPanel = new javax.swing.JPanel();
        txtNameCurrTitle = new javax.swing.JLabel();
        txtTypeCurrentTitle = new javax.swing.JLabel();
        txtCoordXCurrTitle = new javax.swing.JLabel();
        txtCoordYCurrTitle = new javax.swing.JLabel();
        btnEditPOI = new javax.swing.JButton();
        labelTypeNew = new javax.swing.JLabel();
        labelCoordXNew = new javax.swing.JLabel();
        labelCoordYNew = new javax.swing.JLabel();
        labelNameNew = new javax.swing.JLabel();
        txtNewName = new javax.swing.JTextField();
        txtNewCoordX = new javax.swing.JTextField();
        txtNewCoordY = new javax.swing.JTextField();
        labelCurrPOIName = new javax.swing.JLabel();
        labelCurrPOIType = new javax.swing.JLabel();
        labelCurrPOICoordX = new javax.swing.JLabel();
        labelCurrPOICoordY = new javax.swing.JLabel();
        cbNewType = new javax.swing.JComboBox<>();
        deletePOIPanel = new javax.swing.JPanel();
        txtDeletePOIName = new javax.swing.JLabel();
        labelDeletePOIType = new javax.swing.JLabel();
        labelDeletePOICoordX = new javax.swing.JLabel();
        labelDeletePOICoordY = new javax.swing.JLabel();
        btnDeletePOI = new javax.swing.JButton();
        txtDeletePOIType = new javax.swing.JLabel();
        labelDeletePOIName = new javax.swing.JLabel();
        txtDeletePOICoordY = new javax.swing.JLabel();
        txtDeletePOICoordX = new javax.swing.JLabel();
        selectPOIPanel = new javax.swing.JPanel();
        selectedPOINameTitle = new javax.swing.JLabel();
        selectedPOITypeTitle = new javax.swing.JLabel();
        selectedPOICoordXTitle = new javax.swing.JLabel();
        selectedPOICoordYTitle = new javax.swing.JLabel();
        selectedPOIConnectedToTitle = new javax.swing.JLabel();
        selectedPOIConnectedTo = new javax.swing.JLabel();
        selectedPOICoordY = new javax.swing.JLabel();
        selectedPOICoordX = new javax.swing.JLabel();
        selectedPOIType = new javax.swing.JLabel();
        selectedPOIName = new javax.swing.JLabel();
        cbPOIOperations = new javax.swing.JComboBox<>();
        routePanel = new javax.swing.JPanel();
        cbRouteOperations = new javax.swing.JComboBox<>();
        routeOperationsPanel = new javax.swing.JPanel();
        routeCreatePanel = new javax.swing.JPanel();
        txtCreateRouteDistance = new javax.swing.JTextField();
        txtCreateStartingPoint = new javax.swing.JTextField();
        txtCreateArrivalPoint = new javax.swing.JTextField();
        btnCreateRoute = new javax.swing.JButton();
        labelCreateRouteName = new javax.swing.JLabel();
        txtCreateRouteName = new javax.swing.JTextField();
        labelCreateStartingPoint = new javax.swing.JLabel();
        labelCreateArrivalPoint = new javax.swing.JLabel();
        labelCreateRouteDistance = new javax.swing.JLabel();
        labelCreateRouteETime = new javax.swing.JLabel();
        txtCreateRouteETime = new javax.swing.JTextField();
        labelEstimatedTimeUnit = new javax.swing.JLabel();
        labelRouteDistanceUnit = new javax.swing.JLabel();
        routeEditPanel = new javax.swing.JPanel();
        txtNewRouteDistance = new javax.swing.JTextField();
        txtNewStartingPoint = new javax.swing.JTextField();
        txtNewArrivalPoint = new javax.swing.JTextField();
        btnEditRoute = new javax.swing.JButton();
        labelNewRouteName = new javax.swing.JLabel();
        txtNewRouteName = new javax.swing.JTextField();
        labelNewStartingPoint = new javax.swing.JLabel();
        labelNewArrivalPoint = new javax.swing.JLabel();
        labelNewRouteDistance = new javax.swing.JLabel();
        labelCurrRouteNameTitle = new javax.swing.JLabel();
        labelCurrStartingPointTitle = new javax.swing.JLabel();
        labelCurrArrivalPointTitle = new javax.swing.JLabel();
        labelCurrRouteDistanceTitle = new javax.swing.JLabel();
        labelCurrRouteName = new javax.swing.JLabel();
        labelCurrStartingPoint = new javax.swing.JLabel();
        labelCurrArrivalPoint = new javax.swing.JLabel();
        labelCurrRouteDistance = new javax.swing.JLabel();
        labelCurrRouteDistanceUnit = new javax.swing.JLabel();
        labelNewRouteDistanceUnit = new javax.swing.JLabel();
        routeDeletePanel = new javax.swing.JPanel();
        labelDeleteStartingPointNameTitle = new javax.swing.JLabel();
        labelDeleteStartingPointType = new javax.swing.JLabel();
        labelDeleteStartingPointCoordX = new javax.swing.JLabel();
        labelDeleteStartingPointCoordY = new javax.swing.JLabel();
        labelDeleteStartingPointTypeTitle = new javax.swing.JLabel();
        labelDeleteStartingPointName = new javax.swing.JLabel();
        labelDeleteStartingPointCoordYTitle = new javax.swing.JLabel();
        labelDeleteStartingPointCoordXTitle = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        labelDeleteArrivalPointNameTitle = new javax.swing.JLabel();
        labelDeleteArrivalPointType = new javax.swing.JLabel();
        labelDeleteArrivalPointCoordX = new javax.swing.JLabel();
        labelDeleteArrivalPointCoordY = new javax.swing.JLabel();
        labelDeleteArrivalPointTypeTitle = new javax.swing.JLabel();
        labelDeleteArrivalPointName = new javax.swing.JLabel();
        labelDeleteArrivalPointCoordYTitle = new javax.swing.JLabel();
        labelDeleteArrivalPointCoordXTitle = new javax.swing.JLabel();
        btnDeleteRoute = new javax.swing.JButton();
        routeTravelPanel = new javax.swing.JPanel();
        panelTravelRouteOperations = new javax.swing.JPanel();
        createTravelRoutePanel = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        listTravelRoute = new javax.swing.JList<>();
        btnTravelRoute1 = new javax.swing.JButton();
        labelCreateTravelRouteName = new javax.swing.JLabel();
        txtCreateTravelRouteName = new javax.swing.JTextField();
        labelCreateTRTotalDistanceTitle = new javax.swing.JLabel();
        labelCreateTRTotalDistance = new javax.swing.JLabel();
        labelDistanceUnit = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        labelCreateTRTotalTime = new javax.swing.JLabel();
        labelTimeUnit = new javax.swing.JLabel();
        deleteTravelRoutePanel = new javax.swing.JPanel();
        jLabel10 = new javax.swing.JLabel();
        cbTravelRouteDelete = new javax.swing.JComboBox<>();
        jScrollPane3 = new javax.swing.JScrollPane();
        listDeleteRoutePoints = new javax.swing.JList<>();
        jLabel11 = new javax.swing.JLabel();
        btnDeleteTravelRoute = new javax.swing.JButton();
        selectTravelRoutePanel = new javax.swing.JPanel();
        labelPickTR = new javax.swing.JLabel();
        cbTravelRoutesSelected = new javax.swing.JComboBox<>();
        jLabel12 = new javax.swing.JLabel();
        jScrollPane4 = new javax.swing.JScrollPane();
        listSelectedTRPoints = new javax.swing.JList<>();
        jLabel13 = new javax.swing.JLabel();
        jLabel14 = new javax.swing.JLabel();
        labelTotalTRDistace = new javax.swing.JLabel();
        labelTotalTRTime = new javax.swing.JLabel();
        jLabel15 = new javax.swing.JLabel();
        jLabel16 = new javax.swing.JLabel();
        cbTravelRouteOperations = new javax.swing.JComboBox<>();
        shortestPathPanel = new javax.swing.JPanel();
        btnShortPath = new javax.swing.JButton();
        jLabel8 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        labelStartingShortestPath = new javax.swing.JLabel();
        labelArrivalShortestPath = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        listShortestPath = new javax.swing.JList<>();
        jLabel17 = new javax.swing.JLabel();
        jLabel18 = new javax.swing.JLabel();
        labelTotalDistanceSP = new javax.swing.JLabel();
        labelTotalTimeSP = new javax.swing.JLabel();
        jLabel19 = new javax.swing.JLabel();
        jLabel20 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        mapPanel.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                mapPanelMouseClicked(evt);
            }
        });

        javax.swing.GroupLayout mapPanelLayout = new javax.swing.GroupLayout(mapPanel);
        mapPanel.setLayout(mapPanelLayout);
        mapPanelLayout.setHorizontalGroup(
            mapPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );
        mapPanelLayout.setVerticalGroup(
            mapPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 453, Short.MAX_VALUE)
        );

        cbMapMode.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Points of Interest", "Routes", "Travel Route", "Shortest Path" }));
        cbMapMode.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cbMapModeActionPerformed(evt);
            }
        });

        btnLoadMap.setText("Load Map");
        btnLoadMap.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnLoadMapActionPerformed(evt);
            }
        });

        txtSeleccion.setText("                       ");

        mapManagementPanel.setLayout(new java.awt.CardLayout());

        poiOperationsPanel.setLayout(new java.awt.CardLayout());

        btnCreatePOI.setText("Create POI");
        btnCreatePOI.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCreatePOIActionPerformed(evt);
            }
        });

        cbTypeCreatePOI.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Capture Point", "Hospital", "Restaurant", "Gym", "Store" }));
        cbTypeCreatePOI.setToolTipText("");

        jLabel1.setText("Name");

        jLabel2.setText("X");

        jLabel3.setText("Y");

        jLabel4.setText("POI Type");

        javax.swing.GroupLayout createPOIPanelLayout = new javax.swing.GroupLayout(createPOIPanel);
        createPOIPanel.setLayout(createPOIPanelLayout);
        createPOIPanelLayout.setHorizontalGroup(
            createPOIPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(createPOIPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(createPOIPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(createPOIPanelLayout.createSequentialGroup()
                        .addGroup(createPOIPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel1)
                            .addComponent(jLabel4))
                        .addGap(18, 18, 18)
                        .addGroup(createPOIPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(cbTypeCreatePOI, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txtPOICreateName, javax.swing.GroupLayout.PREFERRED_SIZE, 160, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(createPOIPanelLayout.createSequentialGroup()
                        .addComponent(jLabel2)
                        .addGap(18, 18, 18)
                        .addComponent(txtXCoordPOICreate, javax.swing.GroupLayout.PREFERRED_SIZE, 44, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jLabel3)
                        .addGap(18, 18, 18)
                        .addComponent(txtYCoordPOICreate, javax.swing.GroupLayout.PREFERRED_SIZE, 44, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnCreatePOI)))
                .addContainerGap(507, Short.MAX_VALUE))
        );
        createPOIPanelLayout.setVerticalGroup(
            createPOIPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(createPOIPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(createPOIPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(cbTypeCreatePOI, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel4))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(createPOIPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel1)
                    .addComponent(txtPOICreateName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(createPOIPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(txtXCoordPOICreate, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel3)
                    .addComponent(txtYCoordPOICreate, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnCreatePOI))
                .addContainerGap(135, Short.MAX_VALUE))
        );

        poiOperationsPanel.add(createPOIPanel, "card2");

        txtNameCurrTitle.setText("Selected POI:");

        txtTypeCurrentTitle.setText("Type: ");

        txtCoordXCurrTitle.setText("Coord X: ");

        txtCoordYCurrTitle.setText("Coord Y:");

        btnEditPOI.setText("Edit");
        btnEditPOI.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEditPOIActionPerformed(evt);
            }
        });

        labelTypeNew.setText("Type: ");

        labelCoordXNew.setText("Coord X: ");

        labelCoordYNew.setText("Coord Y:");

        labelNameNew.setText("Selected POI:");

        cbNewType.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Capture Point", "Hospital", "Restaurant", "Gym", "Store" }));

        javax.swing.GroupLayout editPOIPanelLayout = new javax.swing.GroupLayout(editPOIPanel);
        editPOIPanel.setLayout(editPOIPanelLayout);
        editPOIPanelLayout.setHorizontalGroup(
            editPOIPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, editPOIPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(editPOIPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(txtNameCurrTitle)
                    .addComponent(txtTypeCurrentTitle)
                    .addComponent(txtCoordXCurrTitle)
                    .addComponent(txtCoordYCurrTitle))
                .addGap(18, 18, 18)
                .addGroup(editPOIPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(labelCurrPOICoordY)
                    .addComponent(labelCurrPOICoordX)
                    .addComponent(labelCurrPOIType)
                    .addComponent(labelCurrPOIName))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 256, Short.MAX_VALUE)
                .addGroup(editPOIPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(btnEditPOI)
                    .addGroup(editPOIPanelLayout.createSequentialGroup()
                        .addGroup(editPOIPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(labelNameNew)
                            .addComponent(labelTypeNew)
                            .addComponent(labelCoordXNew)
                            .addComponent(labelCoordYNew))
                        .addGap(18, 18, 18)
                        .addGroup(editPOIPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(txtNewCoordY, javax.swing.GroupLayout.DEFAULT_SIZE, 110, Short.MAX_VALUE)
                            .addComponent(txtNewCoordX, javax.swing.GroupLayout.DEFAULT_SIZE, 110, Short.MAX_VALUE)
                            .addComponent(txtNewName, javax.swing.GroupLayout.DEFAULT_SIZE, 110, Short.MAX_VALUE)
                            .addComponent(cbNewType, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                .addGap(201, 201, 201))
        );
        editPOIPanelLayout.setVerticalGroup(
            editPOIPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(editPOIPanelLayout.createSequentialGroup()
                .addGap(30, 30, 30)
                .addGroup(editPOIPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(editPOIPanelLayout.createSequentialGroup()
                        .addGroup(editPOIPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(txtNameCurrTitle)
                            .addComponent(labelCurrPOIName))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(editPOIPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(txtTypeCurrentTitle)
                            .addComponent(labelCurrPOIType))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(editPOIPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(txtCoordXCurrTitle)
                            .addComponent(labelCurrPOICoordX))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(editPOIPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(txtCoordYCurrTitle)
                            .addComponent(labelCurrPOICoordY)))
                    .addGroup(editPOIPanelLayout.createSequentialGroup()
                        .addGroup(editPOIPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(labelNameNew)
                            .addComponent(txtNewName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(editPOIPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(labelTypeNew)
                            .addComponent(cbNewType, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(11, 11, 11)
                        .addGroup(editPOIPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(labelCoordXNew)
                            .addComponent(txtNewCoordX, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(editPOIPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(labelCoordYNew)
                            .addComponent(txtNewCoordY, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnEditPOI)
                .addContainerGap(46, Short.MAX_VALUE))
        );

        poiOperationsPanel.add(editPOIPanel, "card3");

        txtDeletePOIName.setText("Name: ");

        btnDeletePOI.setText("Delete POI");
        btnDeletePOI.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDeletePOIActionPerformed(evt);
            }
        });

        txtDeletePOIType.setText("Type: ");

        txtDeletePOICoordY.setText("Coord Y: ");

        txtDeletePOICoordX.setText("Coord X: ");

        javax.swing.GroupLayout deletePOIPanelLayout = new javax.swing.GroupLayout(deletePOIPanel);
        deletePOIPanel.setLayout(deletePOIPanelLayout);
        deletePOIPanelLayout.setHorizontalGroup(
            deletePOIPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(deletePOIPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(deletePOIPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(deletePOIPanelLayout.createSequentialGroup()
                        .addGroup(deletePOIPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, deletePOIPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(txtDeletePOICoordX, javax.swing.GroupLayout.PREFERRED_SIZE, 110, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(txtDeletePOICoordY, javax.swing.GroupLayout.PREFERRED_SIZE, 110, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(txtDeletePOIType, javax.swing.GroupLayout.PREFERRED_SIZE, 110, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txtDeletePOIName, javax.swing.GroupLayout.PREFERRED_SIZE, 110, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(deletePOIPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(labelDeletePOIType, javax.swing.GroupLayout.PREFERRED_SIZE, 110, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(labelDeletePOICoordY, javax.swing.GroupLayout.PREFERRED_SIZE, 110, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(labelDeletePOICoordX, javax.swing.GroupLayout.PREFERRED_SIZE, 110, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(labelDeletePOIName, javax.swing.GroupLayout.PREFERRED_SIZE, 110, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addComponent(btnDeletePOI))
                .addContainerGap(529, Short.MAX_VALUE))
        );
        deletePOIPanelLayout.setVerticalGroup(
            deletePOIPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(deletePOIPanelLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(deletePOIPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(labelDeletePOIName, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtDeletePOIName, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(deletePOIPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(txtDeletePOIType, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(labelDeletePOIType, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(deletePOIPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(deletePOIPanelLayout.createSequentialGroup()
                        .addComponent(labelDeletePOICoordX, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(labelDeletePOICoordY, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(deletePOIPanelLayout.createSequentialGroup()
                        .addComponent(txtDeletePOICoordX, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txtDeletePOICoordY, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(btnDeletePOI, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(81, 81, 81))
        );

        poiOperationsPanel.add(deletePOIPanel, "card4");

        selectedPOINameTitle.setText("POI Name:");

        selectedPOITypeTitle.setText("POI Type: ");

        selectedPOICoordXTitle.setText("Coord X: ");

        selectedPOICoordYTitle.setText("Coord Y: ");

        selectedPOIConnectedToTitle.setText("Connected to:");

        javax.swing.GroupLayout selectPOIPanelLayout = new javax.swing.GroupLayout(selectPOIPanel);
        selectPOIPanel.setLayout(selectPOIPanelLayout);
        selectPOIPanelLayout.setHorizontalGroup(
            selectPOIPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(selectPOIPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(selectPOIPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(selectedPOIConnectedToTitle)
                    .addComponent(selectedPOINameTitle)
                    .addComponent(selectedPOITypeTitle)
                    .addComponent(selectedPOICoordXTitle)
                    .addComponent(selectedPOICoordYTitle))
                .addGap(18, 18, 18)
                .addGroup(selectPOIPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(selectedPOIConnectedTo, javax.swing.GroupLayout.DEFAULT_SIZE, 653, Short.MAX_VALUE)
                    .addGroup(selectPOIPanelLayout.createSequentialGroup()
                        .addGroup(selectPOIPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(selectedPOICoordY)
                            .addComponent(selectedPOICoordX)
                            .addComponent(selectedPOIType)
                            .addComponent(selectedPOIName))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        selectPOIPanelLayout.setVerticalGroup(
            selectPOIPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(selectPOIPanelLayout.createSequentialGroup()
                .addGap(20, 20, 20)
                .addGroup(selectPOIPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(selectedPOINameTitle)
                    .addComponent(selectedPOIName))
                .addGap(18, 18, 18)
                .addGroup(selectPOIPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(selectedPOITypeTitle)
                    .addComponent(selectedPOIType))
                .addGap(18, 18, 18)
                .addGroup(selectPOIPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(selectedPOICoordXTitle)
                    .addComponent(selectedPOICoordX))
                .addGap(18, 18, 18)
                .addGroup(selectPOIPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(selectedPOICoordYTitle)
                    .addComponent(selectedPOICoordY))
                .addGap(18, 18, 18)
                .addGroup(selectPOIPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(selectedPOIConnectedToTitle)
                    .addComponent(selectedPOIConnectedTo, javax.swing.GroupLayout.PREFERRED_SIZE, 16, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(75, Short.MAX_VALUE))
        );

        poiOperationsPanel.add(selectPOIPanel, "card5");

        cbPOIOperations.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Create POI", "Edit POI", "Delete POI", "Select POI" }));
        cbPOIOperations.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cbPOIOperationsActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout pointOfInterestPanelLayout = new javax.swing.GroupLayout(pointOfInterestPanel);
        pointOfInterestPanel.setLayout(pointOfInterestPanelLayout);
        pointOfInterestPanelLayout.setHorizontalGroup(
            pointOfInterestPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pointOfInterestPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(pointOfInterestPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(poiOperationsPanel, javax.swing.GroupLayout.PREFERRED_SIZE, 761, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(cbPOIOperations, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        pointOfInterestPanelLayout.setVerticalGroup(
            pointOfInterestPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pointOfInterestPanelLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(cbPOIOperations, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(poiOperationsPanel, javax.swing.GroupLayout.PREFERRED_SIZE, 247, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(26, 26, 26))
        );

        mapManagementPanel.add(pointOfInterestPanel, "card2");

        cbRouteOperations.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Create Route", "Edit Route", "Delete Route" }));
        cbRouteOperations.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cbRouteOperationsActionPerformed(evt);
            }
        });

        routeOperationsPanel.setLayout(new java.awt.CardLayout());

        btnCreateRoute.setText("Create route");
        btnCreateRoute.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCreateRouteActionPerformed(evt);
            }
        });

        labelCreateRouteName.setText("Route Name:");

        labelCreateStartingPoint.setText("Route Starting Point:");

        labelCreateArrivalPoint.setText("Route Arrival Point:");

        labelCreateRouteDistance.setText("Route Distance:");

        labelCreateRouteETime.setText("Estimated Time:");

        labelEstimatedTimeUnit.setText("mins");

        labelRouteDistanceUnit.setText("km");

        javax.swing.GroupLayout routeCreatePanelLayout = new javax.swing.GroupLayout(routeCreatePanel);
        routeCreatePanel.setLayout(routeCreatePanelLayout);
        routeCreatePanelLayout.setHorizontalGroup(
            routeCreatePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(routeCreatePanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(routeCreatePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(routeCreatePanelLayout.createSequentialGroup()
                        .addComponent(labelCreateRouteName)
                        .addGap(62, 62, 62)
                        .addComponent(txtCreateRouteName, javax.swing.GroupLayout.PREFERRED_SIZE, 99, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(routeCreatePanelLayout.createSequentialGroup()
                        .addGroup(routeCreatePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(labelCreateStartingPoint)
                            .addComponent(labelCreateArrivalPoint)
                            .addComponent(labelCreateRouteDistance))
                        .addGap(18, 18, 18)
                        .addGroup(routeCreatePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(txtCreateArrivalPoint, javax.swing.GroupLayout.PREFERRED_SIZE, 99, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txtCreateStartingPoint, javax.swing.GroupLayout.PREFERRED_SIZE, 99, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(routeCreatePanelLayout.createSequentialGroup()
                                .addComponent(txtCreateRouteETime, javax.swing.GroupLayout.PREFERRED_SIZE, 99, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(labelEstimatedTimeUnit)
                                .addGap(31, 31, 31)
                                .addComponent(btnCreateRoute))
                            .addGroup(routeCreatePanelLayout.createSequentialGroup()
                                .addComponent(txtCreateRouteDistance, javax.swing.GroupLayout.PREFERRED_SIZE, 99, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(labelRouteDistanceUnit))))
                    .addComponent(labelCreateRouteETime))
                .addContainerGap(231, Short.MAX_VALUE))
        );
        routeCreatePanelLayout.setVerticalGroup(
            routeCreatePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(routeCreatePanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(routeCreatePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(labelCreateRouteName)
                    .addComponent(txtCreateRouteName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 14, Short.MAX_VALUE)
                .addGroup(routeCreatePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtCreateStartingPoint, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(labelCreateStartingPoint))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(routeCreatePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtCreateArrivalPoint, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(labelCreateArrivalPoint))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(routeCreatePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtCreateRouteDistance, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(labelCreateRouteDistance)
                    .addComponent(labelRouteDistanceUnit))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(routeCreatePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(labelCreateRouteETime)
                    .addComponent(txtCreateRouteETime, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(labelEstimatedTimeUnit))
                .addGap(21, 21, 21))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, routeCreatePanelLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(btnCreateRoute)
                .addContainerGap())
        );

        routeOperationsPanel.add(routeCreatePanel, "card2");

        btnEditRoute.setText("Edit route");
        btnEditRoute.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEditRouteActionPerformed(evt);
            }
        });

        labelNewRouteName.setText("New Route Name:");

        labelNewStartingPoint.setText("New Route SP:");

        labelNewArrivalPoint.setText("New Route AP");

        labelNewRouteDistance.setText("New Route Distance:");

        labelCurrRouteNameTitle.setText("Route Name:");

        labelCurrStartingPointTitle.setText("Route Starting Point:");

        labelCurrArrivalPointTitle.setText("Route Arrival Point:");

        labelCurrRouteDistanceTitle.setText("Route Distance:");

        labelCurrRouteDistanceUnit.setText("km");

        labelNewRouteDistanceUnit.setText("km");

        javax.swing.GroupLayout routeEditPanelLayout = new javax.swing.GroupLayout(routeEditPanel);
        routeEditPanel.setLayout(routeEditPanelLayout);
        routeEditPanelLayout.setHorizontalGroup(
            routeEditPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, routeEditPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(routeEditPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(routeEditPanelLayout.createSequentialGroup()
                        .addComponent(labelCurrStartingPointTitle)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(labelCurrStartingPoint, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(routeEditPanelLayout.createSequentialGroup()
                        .addGroup(routeEditPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(routeEditPanelLayout.createSequentialGroup()
                                .addComponent(labelCurrRouteNameTitle)
                                .addGap(50, 50, 50)
                                .addComponent(labelCurrRouteName, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                            .addGroup(routeEditPanelLayout.createSequentialGroup()
                                .addComponent(labelCurrRouteDistanceTitle)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(labelCurrRouteDistance, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(labelCurrRouteDistanceUnit))
                            .addGroup(routeEditPanelLayout.createSequentialGroup()
                                .addComponent(labelCurrArrivalPointTitle)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(labelCurrArrivalPoint, javax.swing.GroupLayout.PREFERRED_SIZE, 131, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addGap(35, 35, 35)
                .addGroup(routeEditPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(btnEditRoute)
                    .addGroup(routeEditPanelLayout.createSequentialGroup()
                        .addGroup(routeEditPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(labelNewRouteName)
                            .addComponent(labelNewStartingPoint)
                            .addComponent(labelNewArrivalPoint)
                            .addComponent(labelNewRouteDistance))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(routeEditPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(routeEditPanelLayout.createSequentialGroup()
                                .addGap(2, 2, 2)
                                .addComponent(txtNewRouteDistance, javax.swing.GroupLayout.PREFERRED_SIZE, 99, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(txtNewArrivalPoint, javax.swing.GroupLayout.DEFAULT_SIZE, 131, Short.MAX_VALUE)
                            .addComponent(txtNewStartingPoint)
                            .addComponent(txtNewRouteName))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(labelNewRouteDistanceUnit)))
                .addGap(73, 73, 73))
        );
        routeEditPanelLayout.setVerticalGroup(
            routeEditPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(routeEditPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(routeEditPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(routeEditPanelLayout.createSequentialGroup()
                        .addGroup(routeEditPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(labelNewRouteName)
                            .addComponent(txtNewRouteName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(routeEditPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(txtNewStartingPoint, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(labelNewStartingPoint))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(routeEditPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(txtNewArrivalPoint, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(labelNewArrivalPoint))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(routeEditPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(txtNewRouteDistance, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(labelNewRouteDistance)
                            .addComponent(labelNewRouteDistanceUnit)))
                    .addGroup(routeEditPanelLayout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addGroup(routeEditPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(labelCurrRouteNameTitle, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(labelCurrRouteName, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGap(18, 18, 18)
                        .addGroup(routeEditPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(labelCurrStartingPoint, javax.swing.GroupLayout.PREFERRED_SIZE, 13, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(labelCurrStartingPointTitle))
                        .addGroup(routeEditPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(routeEditPanelLayout.createSequentialGroup()
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 1, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(labelCurrArrivalPoint, javax.swing.GroupLayout.PREFERRED_SIZE, 15, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(labelCurrArrivalPointTitle, javax.swing.GroupLayout.Alignment.TRAILING))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(routeEditPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(labelCurrRouteDistanceUnit)
                            .addComponent(labelCurrRouteDistanceTitle)
                            .addComponent(labelCurrRouteDistance, javax.swing.GroupLayout.PREFERRED_SIZE, 16, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addComponent(btnEditRoute)
                .addContainerGap())
        );

        routeOperationsPanel.add(routeEditPanel, "card3");

        labelDeleteStartingPointNameTitle.setText("Name: ");

        labelDeleteStartingPointTypeTitle.setText("Type: ");

        labelDeleteStartingPointCoordYTitle.setText("Coord Y: ");

        labelDeleteStartingPointCoordXTitle.setText("Coord X: ");

        jLabel5.setText("Starting Point");

        jLabel6.setText("Arrival Point");

        labelDeleteArrivalPointNameTitle.setText("Name: ");

        labelDeleteArrivalPointTypeTitle.setText("Type: ");

        labelDeleteArrivalPointCoordYTitle.setText("Coord Y: ");

        labelDeleteArrivalPointCoordXTitle.setText("Coord X: ");

        btnDeleteRoute.setText("Delete Route");
        btnDeleteRoute.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDeleteRouteActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout routeDeletePanelLayout = new javax.swing.GroupLayout(routeDeletePanel);
        routeDeletePanel.setLayout(routeDeletePanelLayout);
        routeDeletePanelLayout.setHorizontalGroup(
            routeDeletePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(routeDeletePanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(routeDeletePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel5)
                    .addGroup(routeDeletePanelLayout.createSequentialGroup()
                        .addGroup(routeDeletePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, routeDeletePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(labelDeleteStartingPointCoordXTitle, javax.swing.GroupLayout.PREFERRED_SIZE, 110, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(labelDeleteStartingPointCoordYTitle, javax.swing.GroupLayout.PREFERRED_SIZE, 110, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(labelDeleteStartingPointTypeTitle, javax.swing.GroupLayout.PREFERRED_SIZE, 110, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(labelDeleteStartingPointNameTitle, javax.swing.GroupLayout.PREFERRED_SIZE, 110, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(routeDeletePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(labelDeleteStartingPointType, javax.swing.GroupLayout.PREFERRED_SIZE, 110, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(labelDeleteStartingPointCoordY, javax.swing.GroupLayout.PREFERRED_SIZE, 110, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(labelDeleteStartingPointCoordX, javax.swing.GroupLayout.PREFERRED_SIZE, 110, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(labelDeleteStartingPointName, javax.swing.GroupLayout.PREFERRED_SIZE, 110, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addGap(38, 38, 38)
                .addGroup(routeDeletePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel6)
                    .addGroup(routeDeletePanelLayout.createSequentialGroup()
                        .addGroup(routeDeletePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, routeDeletePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(labelDeleteArrivalPointCoordXTitle, javax.swing.GroupLayout.PREFERRED_SIZE, 110, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(labelDeleteArrivalPointCoordYTitle, javax.swing.GroupLayout.PREFERRED_SIZE, 110, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(labelDeleteArrivalPointTypeTitle, javax.swing.GroupLayout.PREFERRED_SIZE, 110, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(labelDeleteArrivalPointNameTitle, javax.swing.GroupLayout.PREFERRED_SIZE, 110, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(routeDeletePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(labelDeleteArrivalPointType, javax.swing.GroupLayout.PREFERRED_SIZE, 110, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(labelDeleteArrivalPointCoordY, javax.swing.GroupLayout.PREFERRED_SIZE, 110, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(labelDeleteArrivalPointCoordX, javax.swing.GroupLayout.PREFERRED_SIZE, 110, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(labelDeleteArrivalPointName, javax.swing.GroupLayout.PREFERRED_SIZE, 110, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(btnDeleteRoute)))
                .addContainerGap())
        );
        routeDeletePanelLayout.setVerticalGroup(
            routeDeletePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, routeDeletePanelLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(routeDeletePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(routeDeletePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, routeDeletePanelLayout.createSequentialGroup()
                            .addComponent(jLabel6)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addGroup(routeDeletePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                .addComponent(labelDeleteArrivalPointName, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(labelDeleteArrivalPointNameTitle, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addGroup(routeDeletePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                .addComponent(labelDeleteArrivalPointTypeTitle, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(labelDeleteArrivalPointType, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addGroup(routeDeletePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                .addGroup(routeDeletePanelLayout.createSequentialGroup()
                                    .addComponent(labelDeleteArrivalPointCoordX, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                    .addComponent(labelDeleteArrivalPointCoordY, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGroup(routeDeletePanelLayout.createSequentialGroup()
                                    .addComponent(labelDeleteArrivalPointCoordXTitle, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                    .addComponent(labelDeleteArrivalPointCoordYTitle, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addGap(18, 18, 18))
                        .addComponent(btnDeleteRoute, javax.swing.GroupLayout.Alignment.TRAILING))
                    .addGroup(routeDeletePanelLayout.createSequentialGroup()
                        .addComponent(jLabel5)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(routeDeletePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(labelDeleteStartingPointName, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(labelDeleteStartingPointNameTitle, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(routeDeletePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(labelDeleteStartingPointTypeTitle, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(labelDeleteStartingPointType, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(routeDeletePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(routeDeletePanelLayout.createSequentialGroup()
                                .addComponent(labelDeleteStartingPointCoordX, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(labelDeleteStartingPointCoordY, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(routeDeletePanelLayout.createSequentialGroup()
                                .addComponent(labelDeleteStartingPointCoordXTitle, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(labelDeleteStartingPointCoordYTitle, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                .addContainerGap())
        );

        routeOperationsPanel.add(routeDeletePanel, "card4");

        javax.swing.GroupLayout routePanelLayout = new javax.swing.GroupLayout(routePanel);
        routePanel.setLayout(routePanelLayout);
        routePanelLayout.setHorizontalGroup(
            routePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(routePanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(routePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(routePanelLayout.createSequentialGroup()
                        .addComponent(cbRouteOperations, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(routePanelLayout.createSequentialGroup()
                        .addComponent(routeOperationsPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGap(119, 119, 119))))
        );
        routePanelLayout.setVerticalGroup(
            routePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, routePanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(cbRouteOperations, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(routeOperationsPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        mapManagementPanel.add(routePanel, "card3");

        panelTravelRouteOperations.setLayout(new java.awt.CardLayout());

        jScrollPane2.setViewportView(listTravelRoute);

        btnTravelRoute1.setText("Create travel route");
        btnTravelRoute1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnTravelRoute1ActionPerformed(evt);
            }
        });

        labelCreateTravelRouteName.setText("Travel route name:");

        labelCreateTRTotalDistanceTitle.setText("Total distance:");

        labelCreateTRTotalDistance.setText("0");

        labelDistanceUnit.setText("km");

        jLabel7.setText("Total time:");

        labelCreateTRTotalTime.setText("0");

        labelTimeUnit.setText("mins");

        javax.swing.GroupLayout createTravelRoutePanelLayout = new javax.swing.GroupLayout(createTravelRoutePanel);
        createTravelRoutePanel.setLayout(createTravelRoutePanelLayout);
        createTravelRoutePanelLayout.setHorizontalGroup(
            createTravelRoutePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(createTravelRoutePanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(createTravelRoutePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(labelCreateTravelRouteName)
                    .addComponent(labelCreateTRTotalDistanceTitle)
                    .addComponent(jLabel7))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(createTravelRoutePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(createTravelRoutePanelLayout.createSequentialGroup()
                        .addComponent(labelCreateTRTotalTime)
                        .addGap(18, 18, 18)
                        .addComponent(labelTimeUnit))
                    .addGroup(createTravelRoutePanelLayout.createSequentialGroup()
                        .addComponent(labelCreateTRTotalDistance)
                        .addGap(18, 18, 18)
                        .addComponent(labelDistanceUnit))
                    .addComponent(txtCreateTravelRouteName, javax.swing.GroupLayout.PREFERRED_SIZE, 133, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(createTravelRoutePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                    .addComponent(btnTravelRoute1))
                .addContainerGap(344, Short.MAX_VALUE))
        );
        createTravelRoutePanelLayout.setVerticalGroup(
            createTravelRoutePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(createTravelRoutePanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(createTravelRoutePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 191, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(createTravelRoutePanelLayout.createSequentialGroup()
                        .addGroup(createTravelRoutePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(labelCreateTravelRouteName)
                            .addComponent(txtCreateTravelRouteName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(createTravelRoutePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(labelCreateTRTotalDistanceTitle)
                            .addComponent(labelCreateTRTotalDistance)
                            .addComponent(labelDistanceUnit))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(createTravelRoutePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel7)
                            .addComponent(labelCreateTRTotalTime)
                            .addComponent(labelTimeUnit))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(btnTravelRoute1)
                .addContainerGap(35, Short.MAX_VALUE))
        );

        panelTravelRouteOperations.add(createTravelRoutePanel, "card2");

        jLabel10.setText("Pick Travel Route to Delete");

        cbTravelRouteDelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cbTravelRouteDeleteActionPerformed(evt);
            }
        });

        jScrollPane3.setViewportView(listDeleteRoutePoints);

        jLabel11.setText("Travel Route Path:");

        btnDeleteTravelRoute.setText("Delete Travel Route");
        btnDeleteTravelRoute.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDeleteTravelRouteActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout deleteTravelRoutePanelLayout = new javax.swing.GroupLayout(deleteTravelRoutePanel);
        deleteTravelRoutePanel.setLayout(deleteTravelRoutePanelLayout);
        deleteTravelRoutePanelLayout.setHorizontalGroup(
            deleteTravelRoutePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(deleteTravelRoutePanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(deleteTravelRoutePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(deleteTravelRoutePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addComponent(jLabel10, javax.swing.GroupLayout.DEFAULT_SIZE, 259, Short.MAX_VALUE)
                        .addComponent(cbTravelRouteDelete, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addComponent(btnDeleteTravelRoute))
                .addGap(18, 18, 18)
                .addGroup(deleteTravelRoutePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel11)
                    .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 249, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(217, Short.MAX_VALUE))
        );
        deleteTravelRoutePanelLayout.setVerticalGroup(
            deleteTravelRoutePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(deleteTravelRoutePanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(deleteTravelRoutePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(deleteTravelRoutePanelLayout.createSequentialGroup()
                        .addComponent(jLabel11)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 242, Short.MAX_VALUE)
                        .addContainerGap())
                    .addGroup(deleteTravelRoutePanelLayout.createSequentialGroup()
                        .addComponent(jLabel10)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(cbTravelRouteDelete, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(btnDeleteTravelRoute)
                        .addGap(28, 28, 28))))
        );

        panelTravelRouteOperations.add(deleteTravelRoutePanel, "card3");

        labelPickTR.setText("Pick a saved travel route:");

        cbTravelRoutesSelected.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cbTravelRoutesSelectedActionPerformed(evt);
            }
        });

        jLabel12.setText("Travel route path:");

        jScrollPane4.setViewportView(listSelectedTRPoints);

        jLabel13.setText("Total distance:");

        jLabel14.setText("Estimated time:");

        jLabel15.setText("mins");

        jLabel16.setText("km");

        javax.swing.GroupLayout selectTravelRoutePanelLayout = new javax.swing.GroupLayout(selectTravelRoutePanel);
        selectTravelRoutePanel.setLayout(selectTravelRoutePanelLayout);
        selectTravelRoutePanelLayout.setHorizontalGroup(
            selectTravelRoutePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(selectTravelRoutePanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(selectTravelRoutePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(labelPickTR, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(cbTravelRoutesSelected, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(43, 43, 43)
                .addGroup(selectTravelRoutePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel12)
                    .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(30, 30, 30)
                .addGroup(selectTravelRoutePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(selectTravelRoutePanelLayout.createSequentialGroup()
                        .addComponent(jLabel14)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(labelTotalTRTime, javax.swing.GroupLayout.PREFERRED_SIZE, 58, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel15))
                    .addGroup(selectTravelRoutePanelLayout.createSequentialGroup()
                        .addComponent(jLabel13)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(labelTotalTRDistace, javax.swing.GroupLayout.PREFERRED_SIZE, 58, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel16)))
                .addContainerGap(191, Short.MAX_VALUE))
        );
        selectTravelRoutePanelLayout.setVerticalGroup(
            selectTravelRoutePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(selectTravelRoutePanelLayout.createSequentialGroup()
                .addGroup(selectTravelRoutePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(selectTravelRoutePanelLayout.createSequentialGroup()
                        .addGap(24, 24, 24)
                        .addGroup(selectTravelRoutePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(labelPickTR)
                            .addComponent(jLabel12)
                            .addComponent(jLabel13)
                            .addComponent(labelTotalTRDistace, javax.swing.GroupLayout.PREFERRED_SIZE, 16, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(selectTravelRoutePanelLayout.createSequentialGroup()
                        .addGap(23, 23, 23)
                        .addComponent(jLabel16)))
                .addGroup(selectTravelRoutePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(selectTravelRoutePanelLayout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(selectTravelRoutePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(selectTravelRoutePanelLayout.createSequentialGroup()
                                .addComponent(cbTravelRoutesSelected, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(0, 0, Short.MAX_VALUE))
                            .addComponent(jScrollPane4, javax.swing.GroupLayout.DEFAULT_SIZE, 224, Short.MAX_VALUE))
                        .addContainerGap())
                    .addGroup(selectTravelRoutePanelLayout.createSequentialGroup()
                        .addGap(25, 25, 25)
                        .addGroup(selectTravelRoutePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(labelTotalTRTime, javax.swing.GroupLayout.PREFERRED_SIZE, 16, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel14)
                            .addComponent(jLabel15))
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
        );

        panelTravelRouteOperations.add(selectTravelRoutePanel, "card4");

        cbTravelRouteOperations.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Create Travel Route", "Delete Travel Route", "Select Travel Route" }));
        cbTravelRouteOperations.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cbTravelRouteOperationsActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout routeTravelPanelLayout = new javax.swing.GroupLayout(routeTravelPanel);
        routeTravelPanel.setLayout(routeTravelPanelLayout);
        routeTravelPanelLayout.setHorizontalGroup(
            routeTravelPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(routeTravelPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(routeTravelPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(panelTravelRouteOperations, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(routeTravelPanelLayout.createSequentialGroup()
                        .addComponent(cbTravelRouteOperations, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        routeTravelPanelLayout.setVerticalGroup(
            routeTravelPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, routeTravelPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(cbTravelRouteOperations, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(panelTravelRouteOperations, javax.swing.GroupLayout.PREFERRED_SIZE, 276, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        mapManagementPanel.add(routeTravelPanel, "card4");

        btnShortPath.setText("ShortestPath");
        btnShortPath.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnShortPathActionPerformed(evt);
            }
        });

        jLabel8.setText("Starting Point:");

        jLabel9.setText("Arrival Point:");

        jScrollPane1.setViewportView(listShortestPath);

        jLabel17.setText("Distance:");

        jLabel18.setText("Time:");

        jLabel19.setText("km");

        jLabel20.setText("mins");

        javax.swing.GroupLayout shortestPathPanelLayout = new javax.swing.GroupLayout(shortestPathPanel);
        shortestPathPanel.setLayout(shortestPathPanelLayout);
        shortestPathPanelLayout.setHorizontalGroup(
            shortestPathPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(shortestPathPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(shortestPathPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(shortestPathPanelLayout.createSequentialGroup()
                        .addGroup(shortestPathPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel8)
                            .addComponent(jLabel9))
                        .addGap(18, 18, 18)
                        .addGroup(shortestPathPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(labelArrivalShortestPath)
                            .addComponent(labelStartingShortestPath))
                        .addGap(166, 166, 166)
                        .addComponent(btnShortPath))
                    .addGroup(shortestPathPanelLayout.createSequentialGroup()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 165, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addGroup(shortestPathPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel17)
                            .addComponent(jLabel18))
                        .addGap(18, 18, 18)
                        .addGroup(shortestPathPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(labelTotalTimeSP, javax.swing.GroupLayout.DEFAULT_SIZE, 57, Short.MAX_VALUE)
                            .addComponent(labelTotalDistanceSP, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(shortestPathPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel19)
                            .addComponent(jLabel20))))
                .addContainerGap(581, Short.MAX_VALUE))
        );
        shortestPathPanelLayout.setVerticalGroup(
            shortestPathPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(shortestPathPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(shortestPathPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(shortestPathPanelLayout.createSequentialGroup()
                        .addGroup(shortestPathPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel8)
                            .addComponent(labelStartingShortestPath))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(shortestPathPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel9)
                            .addComponent(labelArrivalShortestPath)))
                    .addComponent(btnShortPath))
                .addGap(39, 39, 39)
                .addGroup(shortestPathPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 216, Short.MAX_VALUE)
                    .addGroup(shortestPathPanelLayout.createSequentialGroup()
                        .addGroup(shortestPathPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(shortestPathPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(jLabel17)
                                .addComponent(labelTotalDistanceSP, javax.swing.GroupLayout.PREFERRED_SIZE, 16, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(jLabel19))
                        .addGroup(shortestPathPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(shortestPathPanelLayout.createSequentialGroup()
                                .addGap(21, 21, 21)
                                .addGroup(shortestPathPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jLabel18)
                                    .addComponent(labelTotalTimeSP, javax.swing.GroupLayout.PREFERRED_SIZE, 16, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addGroup(shortestPathPanelLayout.createSequentialGroup()
                                .addGap(18, 18, 18)
                                .addComponent(jLabel20)))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );

        mapManagementPanel.add(shortestPathPanel, "card5");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(mapManagementPanel, javax.swing.GroupLayout.PREFERRED_SIZE, 761, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(40, 40, 40)
                                .addComponent(txtSeleccion))
                            .addGroup(layout.createSequentialGroup()
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(cbMapMode, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(btnLoadMap)))
                        .addGap(0, 40, Short.MAX_VALUE))
                    .addComponent(mapPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(mapPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(txtSeleccion)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(mapManagementPanel, javax.swing.GroupLayout.PREFERRED_SIZE, 305, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(cbMapMode, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(btnLoadMap))))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void mapPanelMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_mapPanelMouseClicked
        for(Vertex POI : graphPOI.getVertices()){
            PointOfInterest poiGetInfo = (PointOfInterest) POI.getInternalNode();

            int xPOI = poiGetInfo.getCoordX();
            int yPOI = poiGetInfo.getCoordY();

            if((10 > (evt.getX() - xPOI) && (evt.getX() - xPOI) > 0) && 
                    (10 > (evt.getY() - yPOI) && (evt.getY() - yPOI) > 0)){ //REVISA SI EL CLICK FUE DENTRO DEL CUADRADO, SE PONE ENTRE 0 Y EL TAMAÑO DEL CUADRADO
                operationsHub(poiGetInfo);

            }
            else if(cbPOIOperations.getSelectedIndex() == 0){ //CREATE POI
                int x = evt.getX();
                int y = evt.getY();
                txtXCoordPOICreate.setText(Integer.toString(x));
                txtYCoordPOICreate.setText(Integer.toString(y));
            }
        }
    }//GEN-LAST:event_mapPanelMouseClicked

    private void btnCreatePOIActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCreatePOIActionPerformed
        if(checkVertexAvailability(txtPOICreateName.getText())){
            try{Integer.parseInt(txtXCoordPOICreate.getText());
                Integer.parseInt(txtYCoordPOICreate.getText());}
            catch(Exception e){JOptionPane.showMessageDialog(this, "Coordnates can only be numbers");}
            
            if((Integer.parseInt(txtXCoordPOICreate.getText()) > mapPanel.getWidth() || Integer.parseInt(txtYCoordPOICreate.getText()) > mapPanel.getHeight()))
                JOptionPane.showMessageDialog(this, "Created POI is out of bounds");
            else if(txtPOICreateName.getText().equals(""))
                JOptionPane.showMessageDialog(this, "Name is empty");
            else{
                newPOI();
                txtXCoordPOICreate.setText("");
                txtYCoordPOICreate.setText("");
                txtPOICreateName.setText("");

                drawPOIs();

                try {
                    writePOIsTXT();
                } catch (FileNotFoundException ex) {
                    Logger.getLogger(gui.class.getName()).log(Level.SEVERE, null, ex);}
            }
        }else{JOptionPane.showMessageDialog(this, "Point of interest already exists");}
        
        
    }//GEN-LAST:event_btnCreatePOIActionPerformed

    private void btnLoadMapActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnLoadMapActionPerformed
        repaintMap();
    }//GEN-LAST:event_btnLoadMapActionPerformed

    private void btnCreateRouteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCreateRouteActionPerformed
        if(checkEdgeAvailability(txtCreateRouteName.getText())){
            newRoute(); //HACER ALGO EVITAR ERRORES CON DUPLICADOS
            drawLines();
            try {
                writeRoutesTXT();
            } catch (FileNotFoundException ex) {
                Logger.getLogger(gui.class.getName()).log(Level.SEVERE, null, ex);
            }
        }else{JOptionPane.showMessageDialog(this, "Route exists with that name");}
    }//GEN-LAST:event_btnCreateRouteActionPerformed

    private void btnShortPathActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnShortPathActionPerformed
        dlmShortestPath.removeAllElements();
        listShortestPath.setModel(dlmShortestPath);
        dijkstra();
    }//GEN-LAST:event_btnShortPathActionPerformed

    private void cbMapModeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cbMapModeActionPerformed
        switch(cbMapMode.getSelectedIndex()){
            case 0: 
                mapManagementPanel.removeAll();
                mapManagementPanel.add(pointOfInterestPanel);
                mapManagementPanel.repaint();
                mapManagementPanel.revalidate();
                break;
                
                
            case 1: //Agrega dos vertices seleccionados a la edge
                mapManagementPanel.removeAll();
                mapManagementPanel.add(routePanel);
                mapManagementPanel.repaint();
                mapManagementPanel.revalidate();
                break;
            case 2:
                mapManagementPanel.removeAll();
                mapManagementPanel.add(routeTravelPanel);
                mapManagementPanel.repaint();
                mapManagementPanel.revalidate();
                break;
            case 3:
                mapManagementPanel.removeAll();
                mapManagementPanel.add(shortestPathPanel);
                mapManagementPanel.repaint();
                mapManagementPanel.revalidate();
                break;
                
        }
    }//GEN-LAST:event_cbMapModeActionPerformed

    private void cbPOIOperationsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cbPOIOperationsActionPerformed
        switch(cbPOIOperations.getSelectedIndex()){
            case 0: 
                poiOperationsPanel.removeAll();
                poiOperationsPanel.add(createPOIPanel);
                poiOperationsPanel.repaint();
                poiOperationsPanel.revalidate();
                break;
            case 1:
                poiOperationsPanel.removeAll();
                poiOperationsPanel.add(editPOIPanel);
                poiOperationsPanel.repaint();
                poiOperationsPanel.revalidate();
                break;
            case 2:
                poiOperationsPanel.removeAll();
                poiOperationsPanel.add(deletePOIPanel);
                poiOperationsPanel.repaint();
                poiOperationsPanel.revalidate();
                break;
            case 3:
                poiOperationsPanel.removeAll();
                poiOperationsPanel.add(selectPOIPanel);
                poiOperationsPanel.repaint();
                poiOperationsPanel.revalidate();
                break;
                
        }
    }//GEN-LAST:event_cbPOIOperationsActionPerformed

    private void btnDeletePOIActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDeletePOIActionPerformed
        Vertex verticeToDelete = graphPOIControls.getVertexWithID(labelDeletePOIName.getText());
        Iterator<Vertex<Object>> iter1 = graphPOI.getVertices().iterator();

        while (iter1.hasNext()) {
            Vertex<Object> verticeAct = iter1.next();
            if (verticeAct.equals(verticeToDelete)){
                iter1.remove();}
        }
        graphPOI.setVertices(graphPOIControls.getVertices());
        mapPanel.repaint();

        Iterator<Edge> iter2 = graphPOIControls.getEdges().iterator();

        while (iter2.hasNext()) {
            Edge aristaAct = iter2.next();
            if (aristaAct.getStartingPoint().equals(verticeToDelete) || aristaAct.getArrivalPoint().equals(verticeToDelete)){
                iter2.remove();}
        }
        
        try {
            writePOIsTXT();
            writeRoutesTXT();
        } catch (FileNotFoundException ex) {
            Logger.getLogger(gui.class.getName()).log(Level.SEVERE, null, ex);}
    }//GEN-LAST:event_btnDeletePOIActionPerformed

    private void btnEditPOIActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEditPOIActionPerformed
        if(checkVertexAvailability(txtNewName.getText())){
            if(txtNewName.getText().equals(""))
                JOptionPane.showMessageDialog(this, "Name is empty");
            else{
            String newName = txtNewName.getText();
            String newType = cbNewType.getItemAt(cbNewType.getSelectedIndex());
            int newCoordX;
            int newCoordY;
            Vertex verticeToChange = graphPOIControls.getVertexWithID(labelCurrPOIName.getText());
            PointOfInterest poiChange = (PointOfInterest) verticeToChange.getInternalNode();

            if(txtNewCoordX.getText().equals("") && txtNewCoordY.getText().equals("")){
                newCoordX = Integer.parseInt(labelCurrPOICoordX.getText());
                newCoordY = Integer.parseInt(labelCurrPOICoordY.getText());
            }else{
                newCoordX = Integer.parseInt(txtNewCoordX.getText());
                newCoordY = Integer.parseInt(txtNewCoordY.getText());
            }


            txtNewName.setText("");
            txtNewCoordX.setText("");
            txtNewCoordX.setText("");


            labelCurrPOIName.setText(newName);
            labelCurrPOIType.setText(newType);
            labelCurrPOICoordX.setText(Integer.toString(newCoordX));
            labelCurrPOICoordY.setText(Integer.toString(newCoordY));

            verticeToChange.setId(newName);
            poiChange.setName(newName);
            poiChange.setType(newType);
            poiChange.setCoordX(newCoordX);
            poiChange.setCoordY(newCoordY);



            mapPanel.repaint();

            try {
                writePOIsTXT();
            } catch (FileNotFoundException ex) {
                Logger.getLogger(gui.class.getName()).log(Level.SEVERE, null, ex);}
                    }
        }
        else{JOptionPane.showMessageDialog(this, "Point of interest already exists");}
        
    }//GEN-LAST:event_btnEditPOIActionPerformed

    private void cbRouteOperationsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cbRouteOperationsActionPerformed
        switch(cbRouteOperations.getSelectedIndex()){
            case 0: 
                routeOperationsPanel.removeAll();
                routeOperationsPanel.add(routeCreatePanel);
                routeOperationsPanel.repaint();
                routeOperationsPanel.revalidate();
                break;
            case 1:
                routeOperationsPanel.removeAll();
                routeOperationsPanel.add(routeEditPanel);
                routeOperationsPanel.repaint();
                routeOperationsPanel.revalidate();
                break;
            case 2:
                routeOperationsPanel.removeAll();
                routeOperationsPanel.add(routeDeletePanel);
                routeOperationsPanel.repaint();
                routeOperationsPanel.revalidate();
                break;
        }
    }//GEN-LAST:event_cbRouteOperationsActionPerformed

    private void btnEditRouteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEditRouteActionPerformed
        if(checkEdgeAvailability(txtNewRouteName.getText())){
            Vertex newSP = graphPOIControls.getVertexWithID(txtNewStartingPoint.getText());
            Vertex newAP = graphPOIControls.getVertexWithID(txtNewArrivalPoint.getText());
            if(newSP == (null) || newAP == (null))
                JOptionPane.showMessageDialog(this, "Point does not exist");
            else{ 
                String currentRouteName = labelCurrRouteName.getText();
                Edge edgeToChange1 = graphPOIControls.getEdgeWithID(currentRouteName);
                edgeToChange1.setEdge_id(txtNewRouteName.getText());
                edgeToChange1.setStartingPoint(newSP);
                edgeToChange1.setArrivalPoint(newAP);
                edgeToChange1.setDistance(Integer.parseInt(txtNewRouteDistance.getText()));
                
                Edge edgeToChange2 = graphPOIControls.getEdgeWithID(currentRouteName);
                edgeToChange2.setEdge_id(txtNewRouteName.getText());
                edgeToChange2.setStartingPoint(newAP);
                edgeToChange2.setArrivalPoint(newSP);
                edgeToChange2.setDistance(Integer.parseInt(txtNewRouteDistance.getText()));
                
                labelCurrRouteName.setText("");
                labelCurrStartingPoint.setText("");
                labelCurrArrivalPoint.setText("");
                labelCurrRouteDistance.setText("");
                txtNewRouteName.setText("");
                txtNewStartingPoint.setText("");
                txtNewArrivalPoint.setText("");
                txtNewRouteDistance.setText("");
                
                
                mapPanel.repaint();
            try {
                writeRoutesTXT();
            } catch (FileNotFoundException ex) {
                Logger.getLogger(gui.class.getName()).log(Level.SEVERE, null, ex);
            }
            }
        }
        else{JOptionPane.showMessageDialog(this, "Route already exists with that name");}
        
    }//GEN-LAST:event_btnEditRouteActionPerformed

    private void btnDeleteRouteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDeleteRouteActionPerformed
        Vertex vertexStartingPoint = graphPOIControls.getVertexWithID(labelDeleteStartingPointName.getText());
        Vertex vertexArrivalPoint = graphPOIControls.getVertexWithID(labelDeleteArrivalPointName.getText());
        boolean notFound = true;
        
        Iterator<Edge> iter = graphPOIControls.getEdges().iterator();

        while (iter.hasNext()) {
            Edge currEdge = iter.next();
            if (currEdge.getStartingPoint().equals(vertexStartingPoint) && currEdge.getArrivalPoint().equals(vertexArrivalPoint)
                    || currEdge.getStartingPoint().equals(vertexArrivalPoint) && currEdge.getArrivalPoint().equals(vertexStartingPoint)){
                iter.remove();
                notFound = false;}
            else if ( ! iter.hasNext() && notFound) 
                JOptionPane.showMessageDialog(this, "Points are not connected");
            
        }

        graphPOI.setEdges(graphPOIControls.getEdges());
        mapPanel.repaint();
        try {
            writeRoutesTXT();
        } catch (FileNotFoundException ex) {
            Logger.getLogger(gui.class.getName()).log(Level.SEVERE, null, ex);}
        
    }//GEN-LAST:event_btnDeleteRouteActionPerformed

    private void btnTravelRoute1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnTravelRoute1ActionPerformed
        if(txtCreateTravelRouteName.getText().equals(""))
            JOptionPane.showMessageDialog(this, "Travel route name is empty");
        else if(listTravelRoute.getModel().getSize() == 0)
            JOptionPane.showMessageDialog(this, "Travel route empty");
        else{
            
            
            TravelRoute travelRoute = new TravelRoute(txtCreateTravelRouteName.getText(), Integer.parseInt(labelCreateTRTotalDistance.getText()), Integer.parseInt(labelCreateTRTotalTime.getText()));
            int cont = 0;
            
            while(cont < listTravelRoute.getModel().getSize()){
                Vertex currVertex = graphPOIControls.getVertexWithID(listTravelRoute.getModel().getElementAt(cont).getName());
                travelRoute.addPointInTravelRoute(currVertex);
                cont++;
            }
            listTravelRoutes.add(travelRoute);
            txtCreateTravelRouteName.setText("");
            
            dlmTravelRouteCreate.removeAllElements();
            listTravelRoute.setModel(dlmTravelRouteCreate);
            
            try {
                writeTravelRoutesTXT();
            } catch (FileNotFoundException ex) {
                Logger.getLogger(gui.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }//GEN-LAST:event_btnTravelRoute1ActionPerformed

    private void cbTravelRouteOperationsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cbTravelRouteOperationsActionPerformed
        switch(cbTravelRouteOperations.getSelectedIndex()){
            case 0: //CREATE TRAVEL ROUTE
                panelTravelRouteOperations.removeAll();
                panelTravelRouteOperations.add(createTravelRoutePanel);
                panelTravelRouteOperations.repaint();
                panelTravelRouteOperations.revalidate();
                break;
                
            case 1: //DELETE TRAVEL ROUTE
                String travelRouteName = "";
                DefaultComboBoxModel modelDelete = (DefaultComboBoxModel) cbTravelRouteDelete.getModel();
                
                for(TravelRoute travelRoute : listTravelRoutes){
                    travelRouteName = travelRoute.getRouteName();
                    modelDelete.addElement(travelRouteName);
                }
                panelTravelRouteOperations.removeAll();
                panelTravelRouteOperations.add(deleteTravelRoutePanel);
                panelTravelRouteOperations.repaint();
                panelTravelRouteOperations.revalidate();
                break;
                
            case 2: //SELECT TRAVEL ROUTE
                String travelRouteNameEdit = "";
                DefaultComboBoxModel modelEdit = (DefaultComboBoxModel) cbTravelRoutesSelected.getModel();
                
                for(TravelRoute travelRoute : listTravelRoutes){
                    travelRouteNameEdit = travelRoute.getRouteName();
                    modelEdit.addElement(travelRouteNameEdit);
                }
                
                panelTravelRouteOperations.removeAll();
                panelTravelRouteOperations.add(selectTravelRoutePanel);
                panelTravelRouteOperations.repaint();
                panelTravelRouteOperations.revalidate();
                break;
        }
    }//GEN-LAST:event_cbTravelRouteOperationsActionPerformed

    private void cbTravelRouteDeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cbTravelRouteDeleteActionPerformed
        //WHEN SELECTED FILL THE LIST WITH THE TRAVEL ROUTE NODES
        dlmTravelRouteDelete.removeAllElements();
        listDeleteRoutePoints.setModel(dlmTravelRouteDelete);
        String nameOfTravelRoute = cbTravelRouteDelete.getItemAt(cbTravelRouteDelete.getSelectedIndex());
        for(TravelRoute travelRoute : listTravelRoutes){
            if(travelRoute.getRouteName().equals(nameOfTravelRoute)){
                for(Vertex vertex : travelRoute.getPointsInTravelRoute()){
                    dlmTravelRouteDelete.addElement(vertex.getId());
                    listDeleteRoutePoints.setModel(dlmTravelRouteDelete);
                }
                break;
            }
        }
    }//GEN-LAST:event_cbTravelRouteDeleteActionPerformed

    private void btnDeleteTravelRouteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDeleteTravelRouteActionPerformed
        String nameOfTravelRoute = cbTravelRouteDelete.getItemAt(cbTravelRouteDelete.getSelectedIndex());
        Iterator<TravelRoute> iter = listTravelRoutes.iterator();

        while (iter.hasNext()) {
            TravelRoute currTravelRoute = iter.next();
            if (currTravelRoute.getRouteName().equals(nameOfTravelRoute)){
                iter.remove();}
        }
        dlmTravelRouteDelete.removeAllElements();
        listDeleteRoutePoints.setModel(dlmTravelRouteDelete);
        cbTravelRouteDelete.removeItemAt(cbTravelRouteDelete.getSelectedIndex());
        try {
            writeTravelRoutesTXT();
        } catch (FileNotFoundException ex) {
            Logger.getLogger(gui.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_btnDeleteTravelRouteActionPerformed

    private void cbTravelRoutesSelectedActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cbTravelRoutesSelectedActionPerformed
        dlmTravelRouteSelect.removeAllElements();
        listDeleteRoutePoints.setModel(dlmTravelRouteSelect);
        String nameOfTravelRoute = cbTravelRoutesSelected.getItemAt(cbTravelRoutesSelected.getSelectedIndex());
        for(TravelRoute travelRoute : listTravelRoutes){
            if(travelRoute.getRouteName().equals(nameOfTravelRoute)){
                labelTotalTRDistace.setText(Integer.toString(travelRoute.getTotalDistance()));
                labelTotalTRTime.setText(Integer.toString(travelRoute.getTotalTime()));
                for(Vertex vertex : travelRoute.getPointsInTravelRoute()){
                    dlmTravelRouteSelect.addElement(vertex.getId());
                    listSelectedTRPoints.setModel(dlmTravelRouteSelect);
                }
                break;
            }
        }
    }//GEN-LAST:event_cbTravelRoutesSelectedActionPerformed

    /**
     * @param args the command line arguments
     */
    
    //Lugar central para llevar un punto seleccionado en el mapa a todas las operaciones
    private void operationsHub(PointOfInterest poi){
        switch(cbMapMode.getSelectedIndex()){
            case 0: 
                operationsPOI(poi);
                break;

            case 1:
                operationsRoutes(poi);
                break;

            case 2:
                operationsRouteTravel(poi);
                break;

            case 3:
                operationsShortestPath(poi);
                break;
                
        }
    }
    
    //Controla la gestion de los puntos de interes
    private void operationsPOI(PointOfInterest poi){
        switch(cbPOIOperations.getSelectedIndex()){
            case 1: //EDIT POI
                labelCurrPOIName.setText(poi.getName());
                labelCurrPOIType.setText(poi.getType());
                labelCurrPOICoordX.setText(Integer.toString(poi.getCoordX()));
                labelCurrPOICoordY.setText(Integer.toString(poi.getCoordY()));
                break;
            case 2: //DELETE POI
                labelDeletePOIName.setText(poi.getName());
                labelDeletePOIType.setText(poi.getType());
                labelDeletePOICoordX.setText(Integer.toString(poi.getCoordX()));
                labelDeletePOICoordY.setText(Integer.toString(poi.getCoordY()));
                break;
            case 3: //POI INFO
                selectedPOIName.setText(poi.getName());
                selectedPOIType.setText(poi.getType());
                selectedPOICoordX.setText(Integer.toString(poi.getCoordX()));
                selectedPOICoordY.setText(Integer.toString(poi.getCoordY()));
                String poiNeighbours = "";
                
                for(Edge edge : graphPOI.getEdges()){
                    if(edge.getStartingPoint().equals(graphPOIControls.getVertexWithID(poi.getName()))){
                        poiNeighbours += edge.getArrivalPoint().getId() + ", ";
                    }
                }
                selectedPOIConnectedTo.setText(poiNeighbours);
                break;
        }
    }
    //controla la gestion de las rutas
    private void operationsRoutes(PointOfInterest poi){
        switch(cbRouteOperations.getSelectedIndex()){
            case 0: //CREATE ROUTE
                if(txtCreateStartingPoint.getText().equals("")){
                    txtCreateStartingPoint.setText(poi.getName());
                }else{txtCreateArrivalPoint.setText(poi.getName());}
                break;
            case 1: //EDIT ROUTE
                int i = 0;
                if(labelCurrStartingPoint.getText().equals("")){
                    labelCurrStartingPoint.setText(poi.getName());
                }else{
                    for(Edge edge : graphPOI.getEdges()){
                        Vertex SPVertex = graphPOIControls.getVertexWithID(labelCurrStartingPoint.getText());
                        Vertex APVertex = graphPOIControls.getVertexWithID(poi.getName());
                        if((edge.getStartingPoint().equals(SPVertex) && edge.getArrivalPoint().equals(APVertex))
                                || (edge.getArrivalPoint().equals(SPVertex) && edge.getStartingPoint().equals(APVertex))){
                            labelCurrArrivalPoint.setText(poi.getName());
                            fillRouteInfoEdit(SPVertex, APVertex);
                            break;}
                        
                        else if(i == graphPOI.getEdges().size()-1)
                            JOptionPane.showMessageDialog(this, "Points are not connected");                                                                                
                        
                        i++;
                    }    
                }
                
                break;
            case 2: //DELETE ROUTE
                if(labelDeleteStartingPointName.getText().equals("")){
                    labelDeleteStartingPointName.setText(poi.getName());
                    labelDeleteStartingPointType.setText(poi.getType());
                    labelDeleteStartingPointCoordX.setText(Integer.toString(poi.getCoordX()));
                    labelDeleteStartingPointCoordY.setText(Integer.toString(poi.getCoordY()));
                    
                }else{
                    labelDeleteArrivalPointName.setText(poi.getName());
                    labelDeleteArrivalPointType.setText(poi.getType());
                    labelDeleteArrivalPointCoordX.setText(Integer.toString(poi.getCoordX()));
                    labelDeleteArrivalPointCoordY.setText(Integer.toString(poi.getCoordY()));
                }
                break;
        }
    }
    //controla la gestion de las rutas de viaje
    private void operationsRouteTravel(PointOfInterest poi){
        switch(cbTravelRouteOperations.getSelectedIndex()){
            case 0:
                if(listTravelRoute.getModel().getSize() == 0){
                buildTravelRoute(true, poi, 0, 0);}
                else{
                    PointOfInterest lastElementInList = listTravelRoute.getModel().getElementAt(listTravelRoute.getModel().getSize()-1);

                    for(Edge arista : graphPOI.getEdges()){ 
                        if(arista.getStartingPoint().getId().equals(lastElementInList.getName()) && arista.getArrivalPoint().getId().equals(poi.getName())
                                || arista.getStartingPoint().getId().equals(poi.getName()) && arista.getArrivalPoint().getId().equals(lastElementInList.getName())){ 
                            buildTravelRoute(true, poi, arista.getDistance(), arista.getTimeInMinutes());
                            break;}
                        else if(graphPOI.getEdges().indexOf(arista)+1 == graphPOI.getEdges().size()){
                            buildTravelRoute(false, null, 0, 0);
                            break;}
                    }
                }
                break;
            case 1:
                break;
        }
        
    }
    //llena las labels para realizar dijkstra
    private void operationsShortestPath(PointOfInterest poi){
        
        if(labelStartingShortestPath.getText().equals("")){
            labelStartingShortestPath.setText(poi.getName());
        }else{labelArrivalShortestPath.setText(poi.getName());}
    }
    //realiza dijkstra con una variable de inicio y una de destino
    private void dijkstra(){
        if(labelStartingShortestPath.getText().equals("") || labelArrivalShortestPath.getText().equals(""))
            JOptionPane.showMessageDialog(this, "Select a starting and arrival point"); 
        else{
            try{
                Vertex startingPoint = graphPOIControls.getVertexWithID(labelStartingShortestPath.getText());
                Vertex arrivalPoint = graphPOIControls.getVertexWithID(labelArrivalShortestPath.getText());
                int distanceSum = 0;
                int timeSum = 0;

                Dijkstra dijkstra = new Dijkstra(graphPOI);
                dijkstra.runGraph(startingPoint);
                LinkedList pathList = dijkstra.getPathList(arrivalPoint);
                Object[] pathArray = pathList.toArray();
                for(Object objVertex : pathArray){
                    Vertex vertex = (Vertex) objVertex;
                    PointOfInterest POI = (PointOfInterest) vertex.getInternalNode();

                    dlmShortestPath.addElement(POI);
                    listShortestPath.setModel(dlmShortestPath);

                }
            }catch(Exception e){JOptionPane.showMessageDialog(this, "Points are not connected"); }
            
        }

    }
    //vuelve a cargar el mapa
    private void repaintMap(){
        drawPOIs();
        drawLines();
    }
    //rellena labels con la informacion de la ruta
    private void fillRouteInfoEdit(Vertex SPVertex, Vertex APVertex){
        for(Edge edge : graphPOI.getEdges()){
            if((edge.getStartingPoint().equals(SPVertex) && edge.getArrivalPoint().equals(APVertex))
                    || (edge.getArrivalPoint().equals(SPVertex) && edge.getStartingPoint().equals(APVertex))){
                labelCurrRouteName.setText(edge.getEdge_id());
                labelCurrRouteDistance.setText(Integer.toString(edge.getDistance()));
                
                txtNewRouteName.setText(edge.getEdge_id());
                txtNewStartingPoint.setText(SPVertex.getId());
                txtNewArrivalPoint.setText(APVertex.getId());
                txtNewRouteDistance.setText(Integer.toString(edge.getDistance()));
            }
        }    
    }
    
    //contruye la ruta de viaje en una jList
    private void buildTravelRoute(boolean state, PointOfInterest poiAdd, int edgeDistance, int edgeTime){
        if(state){ 
            int distanceSum = Integer.parseInt(labelCreateTRTotalDistance.getText()) + edgeDistance;
            int timeSum = Integer.parseInt(labelCreateTRTotalTime.getText()) + edgeTime;
            String distanceSumText = Integer.toString(distanceSum);
            String timeSumText = Integer.toString(timeSum);
            labelCreateTRTotalTime.setText(timeSumText);
            labelCreateTRTotalDistance.setText(distanceSumText);
            dlmTravelRouteCreate.addElement(poiAdd);
            listTravelRoute.setModel(dlmTravelRouteCreate);
        }else JOptionPane.showMessageDialog(this, "Points are not connected");
    }
    
    //crea un nuevo punto de interes
    private void newPOI(){
        
        PointOfInterest newPOI = new PointOfInterest(Integer.parseInt(txtXCoordPOICreate.getText()), Integer.parseInt(txtYCoordPOICreate.getText()), 
        txtPOICreateName.getText(), cbTypeCreatePOI.getSelectedItem().toString());

        graphPOIControls.newVertex(txtPOICreateName.getText(), newPOI);
        graphPOI.setVertices(graphPOIControls.getVertices());

    }
    //crea una nueva ruta entre dos puntos seleccionados
    private void newRoute(){
        
        Vertex startingPoint = graphPOIControls.getVertexWithID(txtCreateStartingPoint.getText());
        Vertex arrivalPoint = graphPOIControls.getVertexWithID(txtCreateArrivalPoint.getText());
        if(startingPoint == (null) || arrivalPoint == (null))
            JOptionPane.showMessageDialog(this, "Point does not exist");
        else{ 
            try{
                 Integer.parseInt(txtCreateRouteDistance.getText());
                 Integer.parseInt(txtCreateRouteETime.getText());

                 int count = 0;
                 int startingPointIndex = 0;
                 int arrivalPointIndex = 0;

                 for(Vertex vertex : graphPOI.getVertices()){
                     if(vertex.equals(startingPoint)){
                         startingPointIndex = count;
                     }
                     else if(vertex.equals(arrivalPoint)){
                         arrivalPointIndex = count;
                     }
                     count ++;
                 }


                 graphPOIControls.newMapEdge(txtCreateRouteName.getText(), startingPointIndex, arrivalPointIndex, 
                         Integer.parseInt(txtCreateRouteDistance.getText()), Integer.parseInt(txtCreateRouteETime.getText()));
                 graphPOI.setEdges(graphPOIControls.getEdges());

                 txtCreateRouteName.setText("");
                 txtCreateStartingPoint.setText("");
                 txtCreateArrivalPoint.setText("");
                 txtCreateRouteDistance.setText("");
            }catch(Exception e){JOptionPane.showMessageDialog(this, "Distance and Time must be numbers");}}
    }
    //revisa si el nombre del vertice esta disponible
    private boolean checkVertexAvailability(String vertexName){
        Vertex selectedVertex = graphPOIControls.getVertexWithID(vertexName);
        if(selectedVertex == null)
            return true;
        else{return false;}
    }
    //revisa si el nombre de la ruta esta disponible
    private boolean checkEdgeAvailability(String edgeName){
        Edge selectedEdge = graphPOIControls.getEdgeWithID(edgeName);
        if(selectedEdge == null)
            return true;
        else{return false;}
    }
    //pinta las rutas en el panel del mapa
    private void drawLines(){
        Graphics shape = mapPanel.getGraphics();
        mapPanel.paintComponents(shape);
        for(Edge POIEdges : graphPOI.getEdges()){
            
            Vertex startingPoint = POIEdges.getStartingPoint();
            Vertex arrivalPoint = POIEdges.getArrivalPoint();
            
            
            PointOfInterest startingPointInfo = (PointOfInterest) startingPoint.getInternalNode();
            PointOfInterest arrivalPointInfo = (PointOfInterest) arrivalPoint.getInternalNode();
            
            int xStartingPoint = startingPointInfo.getCoordX();
            int yStartingPoint = startingPointInfo.getCoordY();
            
            int xArrivalPoint = arrivalPointInfo.getCoordX();
            int yArrivalPoint = arrivalPointInfo.getCoordY();
            
            mapPanel.paintComponents(shape);
            shape.setColor(Color.black);
            shape.drawLine(xStartingPoint, yStartingPoint, xArrivalPoint, yArrivalPoint);
 
        }
    }

    //pinta las rutas almacenadas en el mapa
    private void drawPOIs(){
        Graphics shape = mapPanel.getGraphics();
        
        for(Vertex POI : graphPOI.getVertices()){
            PointOfInterest poiInfo = (PointOfInterest) POI.getInternalNode();
            int x = poiInfo.getCoordX();
            int y = poiInfo.getCoordY();            
            
            switch(poiInfo.getType()){
                case "Capture Point":
                    mapPanel.paintComponents(shape);
                    shape.setColor(Color.blue);
                    shape.fillRect(x, y, 10, 10);
                    break;
                case "Hospital":
                    mapPanel.paintComponents(shape);
                    shape.setColor(Color.green);
                    shape.fillRect(x, y, 10, 10);
                    break;
                case "Restaurant":
                    mapPanel.paintComponents(shape);
                    shape.setColor(Color.red);
                    shape.fillRect(x, y, 10, 10);
                    break;
                case "Store":
                    mapPanel.paintComponents(shape);
                    shape.setColor(Color.yellow);
                    shape.fillRect(x, y, 10, 10);
                    break;
                case "Gym":
                    mapPanel.paintComponents(shape);
                    shape.setColor(Color.orange);
                    shape.fillRect(x, y, 10, 10);
                    break;                
            }
        }
    }
//actualiza los datos de puntos de interes para la persistencia de datos
    private void writePOIsTXT() throws FileNotFoundException{
        PrintWriter outputStream = new PrintWriter("C:/Users/JoseM/Desktop/poiPersistence.txt");
        
        for(Vertex vertex : graphPOI.getVertices()){
            PointOfInterest poi = (PointOfInterest) vertex.getInternalNode();
            outputStream.println(poi.getName() + "," + poi.getType() + "," + poi.getCoordX() + "," + poi.getCoordY());
            
        }
        outputStream.close();
    }
//abre los datos de puntos de interes para la persistencia de datos    
    private void openPOIsTXT() throws FileNotFoundException, IOException{
        File file = new File("C://Users//JoseM/Desktop//poiPersistence.txt");

        Scanner inputStream = new Scanner(file);
        while(inputStream.hasNext()){

            String data = inputStream.nextLine();
            String[] values = data.split(",");

            String name = values[0];
            String typevalues = values[1];
            int coordXvalues = Integer.parseInt(values[2]);
            int coordYvalues = Integer.parseInt(values[3]);
            PointOfInterest newPOI = new PointOfInterest(coordXvalues, coordYvalues, name, typevalues);

            graphPOIControls.newVertex(values[0], newPOI);
        }
        inputStream.close();

        graphPOI.setVertices(graphPOIControls.getVertices());

    }
//actualiza los datos de rutas para la persistencia de datos    
    private void writeRoutesTXT() throws FileNotFoundException{
        PrintWriter outputStream = new PrintWriter("C://Users//JoseM//Desktop//routePersistence.txt");
        for(Edge edge : graphPOI.getEdges()){
            Vertex startingVertex = edge.getStartingPoint();
            Vertex arrivalVertex = edge.getArrivalPoint();
            
            int distance = edge.getDistance();
            int time = edge.getTimeInMinutes();
            String edgeName = edge.getEdge_id();
            
            int count = 0;
            int startingPointIndex = 0;
            int arrivalPointIndex = 0;
            
            for(Vertex vertex:graphPOI.getVertices()){
                if(vertex.equals(startingVertex)){
                    startingPointIndex = count;
                }
                else if(vertex.equals(arrivalVertex)){
                    arrivalPointIndex = count;
                }
                count ++;
            }
            outputStream.println(edgeName + "," + distance + "," + time + "," + startingPointIndex + "," + arrivalPointIndex);
        }
        outputStream.close();
    }
//abre los datos de rutas para la persistencia de datos  
    private void openRoutesTXT() throws FileNotFoundException, IOException{
        File file = new File("C://Users//JoseM//Desktop//routePersistence.txt");
        Scanner inputStream = new Scanner(file);
        while(inputStream.hasNext()){

            String data = inputStream.nextLine();
            String[] values = data.split(",");

            String name = values[0];
            int distance = Integer.parseInt(values[1]);
            int time = Integer.parseInt(values[2]);
            int StartingIndex = Integer.parseInt(values[3]);
            int arrivalIndex = Integer.parseInt(values[4]);
            graphPOIControls.openMapEdges(name, StartingIndex, arrivalIndex, distance, time);
            
        }
        inputStream.close();
        graphPOI.setEdges(graphPOIControls.getEdges());
    }
//actualiza los datos de rutas para la persistencia de datos      
    private void writeTravelRoutesTXT() throws FileNotFoundException{
        PrintWriter outputStream = new PrintWriter("C://Users//JoseM//Desktop//travelRoutePersistence.txt");
        for(TravelRoute travelRoute : listTravelRoutes){
            String pointsInTravelNames = "";
            for(Vertex vertex : travelRoute.getPointsInTravelRoute()){
                pointsInTravelNames += "," + vertex.getId();
            }
            outputStream.println(travelRoute.getRouteName() + "," + travelRoute.getTotalDistance() + "," + travelRoute.getTotalTime() + pointsInTravelNames);
        }
        outputStream.close();
    }
//abre los datos de rutas de viaje para la persistencia de datos      
    private void openTravelRoutesTXT() throws FileNotFoundException, IOException{
        File file = new File("C://Users//JoseM//Desktop//travelRoutePersistence.txt");
        Scanner inputStream = new Scanner(file);
        while(inputStream.hasNext()){

            String data = inputStream.nextLine();
            String[] values = data.split(",");
            
            TravelRoute travelRoute = new TravelRoute(values[0], Integer.parseInt(values[1]), Integer.parseInt(values[2]));
            int count = 3;
            
            while(count < values.length){
                Vertex verticeAct = graphPOIControls.getVertexWithID(values[count]);
                travelRoute.addPointInTravelRoute(verticeAct);
                count++;
            }
            listTravelRoutes.add(travelRoute);
        }
        inputStream.close();
        
    }

    
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(gui.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(gui.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(gui.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(gui.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                gui GUI = new gui();
                GUI.setVisible(true);
                
                try {
                    GUI.openPOIsTXT();
                    GUI.openRoutesTXT();
                    GUI.openTravelRoutesTXT();
                } catch (IOException ex) {
                    Logger.getLogger(gui.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnCreatePOI;
    private javax.swing.JButton btnCreateRoute;
    private javax.swing.JButton btnDeletePOI;
    private javax.swing.JButton btnDeleteRoute;
    private javax.swing.JButton btnDeleteTravelRoute;
    private javax.swing.JButton btnEditPOI;
    private javax.swing.JButton btnEditRoute;
    private javax.swing.JButton btnLoadMap;
    private javax.swing.JButton btnShortPath;
    private javax.swing.JButton btnTravelRoute1;
    private javax.swing.JComboBox<String> cbMapMode;
    private javax.swing.JComboBox<String> cbNewType;
    private javax.swing.JComboBox<String> cbPOIOperations;
    private javax.swing.JComboBox<String> cbRouteOperations;
    private javax.swing.JComboBox<String> cbTravelRouteDelete;
    private javax.swing.JComboBox<String> cbTravelRouteOperations;
    private javax.swing.JComboBox<String> cbTravelRoutesSelected;
    private javax.swing.JComboBox<String> cbTypeCreatePOI;
    private javax.swing.JPanel createPOIPanel;
    private javax.swing.JPanel createTravelRoutePanel;
    private javax.swing.JPanel deletePOIPanel;
    private javax.swing.JPanel deleteTravelRoutePanel;
    private javax.swing.JPanel editPOIPanel;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel17;
    private javax.swing.JLabel jLabel18;
    private javax.swing.JLabel jLabel19;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel20;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JLabel labelArrivalShortestPath;
    private javax.swing.JLabel labelCoordXNew;
    private javax.swing.JLabel labelCoordYNew;
    private javax.swing.JLabel labelCreateArrivalPoint;
    private javax.swing.JLabel labelCreateRouteDistance;
    private javax.swing.JLabel labelCreateRouteETime;
    private javax.swing.JLabel labelCreateRouteName;
    private javax.swing.JLabel labelCreateStartingPoint;
    private javax.swing.JLabel labelCreateTRTotalDistance;
    private javax.swing.JLabel labelCreateTRTotalDistanceTitle;
    private javax.swing.JLabel labelCreateTRTotalTime;
    private javax.swing.JLabel labelCreateTravelRouteName;
    private javax.swing.JLabel labelCurrArrivalPoint;
    private javax.swing.JLabel labelCurrArrivalPointTitle;
    private javax.swing.JLabel labelCurrPOICoordX;
    private javax.swing.JLabel labelCurrPOICoordY;
    private javax.swing.JLabel labelCurrPOIName;
    private javax.swing.JLabel labelCurrPOIType;
    private javax.swing.JLabel labelCurrRouteDistance;
    private javax.swing.JLabel labelCurrRouteDistanceTitle;
    private javax.swing.JLabel labelCurrRouteDistanceUnit;
    private javax.swing.JLabel labelCurrRouteName;
    private javax.swing.JLabel labelCurrRouteNameTitle;
    private javax.swing.JLabel labelCurrStartingPoint;
    private javax.swing.JLabel labelCurrStartingPointTitle;
    private javax.swing.JLabel labelDeleteArrivalPointCoordX;
    private javax.swing.JLabel labelDeleteArrivalPointCoordXTitle;
    private javax.swing.JLabel labelDeleteArrivalPointCoordY;
    private javax.swing.JLabel labelDeleteArrivalPointCoordYTitle;
    private javax.swing.JLabel labelDeleteArrivalPointName;
    private javax.swing.JLabel labelDeleteArrivalPointNameTitle;
    private javax.swing.JLabel labelDeleteArrivalPointType;
    private javax.swing.JLabel labelDeleteArrivalPointTypeTitle;
    private javax.swing.JLabel labelDeletePOICoordX;
    private javax.swing.JLabel labelDeletePOICoordY;
    private javax.swing.JLabel labelDeletePOIName;
    private javax.swing.JLabel labelDeletePOIType;
    private javax.swing.JLabel labelDeleteStartingPointCoordX;
    private javax.swing.JLabel labelDeleteStartingPointCoordXTitle;
    private javax.swing.JLabel labelDeleteStartingPointCoordY;
    private javax.swing.JLabel labelDeleteStartingPointCoordYTitle;
    private javax.swing.JLabel labelDeleteStartingPointName;
    private javax.swing.JLabel labelDeleteStartingPointNameTitle;
    private javax.swing.JLabel labelDeleteStartingPointType;
    private javax.swing.JLabel labelDeleteStartingPointTypeTitle;
    private javax.swing.JLabel labelDistanceUnit;
    private javax.swing.JLabel labelEstimatedTimeUnit;
    private javax.swing.JLabel labelNameNew;
    private javax.swing.JLabel labelNewArrivalPoint;
    private javax.swing.JLabel labelNewRouteDistance;
    private javax.swing.JLabel labelNewRouteDistanceUnit;
    private javax.swing.JLabel labelNewRouteName;
    private javax.swing.JLabel labelNewStartingPoint;
    private javax.swing.JLabel labelPickTR;
    private javax.swing.JLabel labelRouteDistanceUnit;
    private javax.swing.JLabel labelStartingShortestPath;
    private javax.swing.JLabel labelTimeUnit;
    private javax.swing.JLabel labelTotalDistanceSP;
    private javax.swing.JLabel labelTotalTRDistace;
    private javax.swing.JLabel labelTotalTRTime;
    private javax.swing.JLabel labelTotalTimeSP;
    private javax.swing.JLabel labelTypeNew;
    private javax.swing.JList<String> listDeleteRoutePoints;
    private javax.swing.JList<String> listSelectedTRPoints;
    private javax.swing.JList<String> listShortestPath;
    private javax.swing.JList<PointOfInterest> listTravelRoute;
    private javax.swing.JPanel mapManagementPanel;
    private javax.swing.JPanel mapPanel;
    private javax.swing.JPanel panelTravelRouteOperations;
    private javax.swing.JPanel poiOperationsPanel;
    private javax.swing.JPanel pointOfInterestPanel;
    private javax.swing.JPanel routeCreatePanel;
    private javax.swing.JPanel routeDeletePanel;
    private javax.swing.JPanel routeEditPanel;
    private javax.swing.JPanel routeOperationsPanel;
    private javax.swing.JPanel routePanel;
    private javax.swing.JPanel routeTravelPanel;
    private javax.swing.JPanel selectPOIPanel;
    private javax.swing.JPanel selectTravelRoutePanel;
    private javax.swing.JLabel selectedPOIConnectedTo;
    private javax.swing.JLabel selectedPOIConnectedToTitle;
    private javax.swing.JLabel selectedPOICoordX;
    private javax.swing.JLabel selectedPOICoordXTitle;
    private javax.swing.JLabel selectedPOICoordY;
    private javax.swing.JLabel selectedPOICoordYTitle;
    private javax.swing.JLabel selectedPOIName;
    private javax.swing.JLabel selectedPOINameTitle;
    private javax.swing.JLabel selectedPOIType;
    private javax.swing.JLabel selectedPOITypeTitle;
    private javax.swing.JPanel shortestPathPanel;
    private javax.swing.JLabel txtCoordXCurrTitle;
    private javax.swing.JLabel txtCoordYCurrTitle;
    private javax.swing.JTextField txtCreateArrivalPoint;
    private javax.swing.JTextField txtCreateRouteDistance;
    private javax.swing.JTextField txtCreateRouteETime;
    private javax.swing.JTextField txtCreateRouteName;
    private javax.swing.JTextField txtCreateStartingPoint;
    private javax.swing.JTextField txtCreateTravelRouteName;
    private javax.swing.JLabel txtDeletePOICoordX;
    private javax.swing.JLabel txtDeletePOICoordY;
    private javax.swing.JLabel txtDeletePOIName;
    private javax.swing.JLabel txtDeletePOIType;
    private javax.swing.JLabel txtNameCurrTitle;
    private javax.swing.JTextField txtNewArrivalPoint;
    private javax.swing.JTextField txtNewCoordX;
    private javax.swing.JTextField txtNewCoordY;
    private javax.swing.JTextField txtNewName;
    private javax.swing.JTextField txtNewRouteDistance;
    private javax.swing.JTextField txtNewRouteName;
    private javax.swing.JTextField txtNewStartingPoint;
    private javax.swing.JTextField txtPOICreateName;
    private javax.swing.JLabel txtSeleccion;
    private javax.swing.JLabel txtTypeCurrentTitle;
    private javax.swing.JTextField txtXCoordPOICreate;
    private javax.swing.JTextField txtYCoordPOICreate;
    // End of variables declaration//GEN-END:variables
}
